// Usage
//  1. Enter sheet name where data is to be written below
        var SHEET_NAME = "Sheet1";
        var TRACKER_SHEET_NAME = "Everyday Tracker";
        
//  2. Run > setup
//
//  3. Publish > Deploy as web app 
//    - enter Project Version name and click 'Save New Version' 
//    - set security level and enable service (most likely execute as 'me' and access 'anyone, even anonymously) 
//
//  4. Copy the 'Current web app URL' and post this in your form/script action 
//
//  5. Insert column names on your destination sheet matching the parameter names of the data you are passing in (exactly matching case)

var SCRIPT_PROP = PropertiesService.getScriptProperties(); // new property service

// If you don't want to expose either GET or POST methods you can comment out the appropriate function
function doGet(e){
  return handleResponse(e);
}

function doPost(e){
  return handleResponse(e);
}

function handleResponse(e) {
  // shortly after my original solution Google announced the LockService[1]
  // this prevents concurrent access overwritting data
  // [1] http://googleappsdeveloper.blogspot.co.uk/2011/10/concurrency-and-google-apps-script.html
  // we want a public lock, one that locks for all invocations
  var lock = LockService.getPublicLock();
  lock.waitLock(30000);  // wait 30 seconds before conceding defeat.
  
  try {
    // next set where we write the data - you could write to multiple/alternate destinations
    var doc = SpreadsheetApp.openById(SCRIPT_PROP.getProperty("key"));
    var sheet = doc.getSheetByName(SHEET_NAME);
    var trackerSheet = doc.getSheetByName(TRACKER_SHEET_NAME);

    // Zeroes Everyday Tracker out
    var l = sheet.getRange(sheet.getLastRow(),6).getValue();
    var lastDate = l.getDate();
    var d = new Date();
    var currentDate = d.getDate();
    if (lastDate != currentDate) {
      var cloneName = Utilities.formatDate(l, "GMT-5", 'MMMM dd, yyyy');
      cloneGoogleSheet(cloneName);
      zero(6, 22, 3);
      zero(6, 22, 4);
      zero(27, 41, 3);
      zero(27, 41, 4);
      zero(44, 47, 2);
      zero(44, 48, 4);
    }
    
    // we'll assume header is in row 1 but you can override with header_row in GET/POST data
    var headRow = e.parameter.header_row || 1;
    var headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    var nextRow = sheet.getLastRow()+1; // get next row
    var row = [];
    // loop through the header columns
    for (i in headers){
      if (headers[i] == "Timestamp"){ // special case if you include a 'Timestamp' column
        row.push(new Date());
      } else { // else use header name to get data
        row.push(e.parameter[headers[i]]);
      }
    }
    // more efficient to set values as [][] array than individually
    sheet.getRange(nextRow, 1, 1, row.length).setValues([row]);

    // return data to Tracker
    if ((e.parameter["agent_id"] != "") && (e.parameter["Agent"] != "")) {
      var currentRow = getRow(e.parameter["agent_id"], e.parameter["Agent"]);
      if (currentRow != 0) {
        if (e.parameter["Status"] == "Sold") {
          var temp1 = trackerSheet.getRange(currentRow,3).getValue();
          trackerSheet.getRange(currentRow,3).setValue(temp1 + 1);
          var temp2 = trackerSheet.getRange(currentRow,4).getValue();
          trackerSheet.getRange(currentRow,4).setValue(temp2 + 1);
        } else if (e.parameter["Status"] == "Returned") {
          var temp2 = trackerSheet.getRange(currentRow,4).getValue();
          trackerSheet.getRange(currentRow,4).setValue(temp2 - 1);
        }
      }
    }

    if (e.parameter["Buyer"] == "Sunpro") {
      if (e.parameter["Status"] == "Sold") {
        var sunpro_gross = trackerSheet.getRange("B44").getValue();
        sunpro_gross += 1;
        trackerSheet.getRange("B44").setValue(sunpro_gross);
      } else if (e.parameter["Status"] == "Returned") {
        var sunpro_ret = trackerSheet.getRange("D44").getValue();
        sunpro_ret += 1;
        trackerSheet.getRange("D44").setValue(sunpro_ret);
      }
    } else if (e.parameter["Buyer"] == "Suntuity") {
      if (e.parameter["Status"] == "Sold") {
        var suntuity_gross = trackerSheet.getRange("B45").getValue();
        suntuity_gross += 1;
        trackerSheet.getRange("B45").setValue(suntuity_gross);
      } else if (e.parameter["Status"] == "Returned") {
        var suntuity_ret = trackerSheet.getRange("D45").getValue();
        suntuity_ret += 1;
        trackerSheet.getRange("D45").setValue(suntuity_ret);
      }
    } else if (e.parameter["Buyer"] == "Trinity") {
      if (e.parameter["Status"] == "Sold") {
        var trinity_gross = trackerSheet.getRange("B46").getValue();
        trinity_gross += 1;
        trackerSheet.getRange("B46").setValue(trinity_gross);
      } else if (e.parameter["Status"] == "Returned") {
        var trinity_ret = trackerSheet.getRange("D46").getValue();
        trinity_ret += 1;
        trackerSheet.getRange("D46").setValue(trinity_ret);
      }
    } else if (e.parameter["Buyer"] == "Sunpower") {
      if (e.parameter["Status"] == "Sold") {
        var sunpower_gross = trackerSheet.getRange("B47").getValue();
        sunpower_gross += 1;
        trackerSheet.getRange("B47").setValue(sunpower_gross);
      } else if (e.parameter["Status"] == "Returned") {
        var sunpower_ret = trackerSheet.getRange("D47").getValue();
        sunpower_ret += 1;
        trackerSheet.getRange("D47").setValue(sunpower_ret);
      }
    }

    // return json success results
    return ContentService
          .createTextOutput(JSON.stringify({"result":"success", "row": nextRow}))
          .setMimeType(ContentService.MimeType.JSON);
  } catch(e){
    // if error return this
    return ContentService
          .createTextOutput(JSON.stringify({"result":"error", "error": e}))
          .setMimeType(ContentService.MimeType.JSON);
  } finally { //release lock
    lock.releaseLock();
  }
}

function setup() {
  var doc = SpreadsheetApp.getActiveSpreadsheet();
  SCRIPT_PROP.setProperty("key", doc.getId());
}

function getRow(agent_id, agent_name) {
  var doc = SpreadsheetApp.openById(SCRIPT_PROP.getProperty("key"));
  var trackerSheet = doc.getSheetByName(TRACKER_SHEET_NAME);

  var a = 0;
  var agent = String(agent_id) + " " + agent_name;
  var agents = trackerSheet.getRange(1, 1, 49, 1).getValues();
  for (var counter = 0; counter <= 39; counter = counter + 1){
    if (agents[counter][0] == agent){
      a = counter+1;
      break;
    }
  }
  return a;
}

function mySum(A1NotationString){
  var A1NotationString= "B44:B47"
  var doc = SpreadsheetApp.openById(SCRIPT_PROP.getProperty("key"));
  var trackerSheet = doc.getSheetByName(TRACKER_SHEET_NAME);

  var sum=0;
  trackerSheet.getRange(A1NotationString).getValues().forEach(function(item){sum+=Number(item);});
  return sum;
}

function remove_dol(price) {
  var temp = price.replace("$","");
  return parseInt(temp);
}

function cloneGoogleSheet(cloneName) {
  var doc = SpreadsheetApp.openById(SCRIPT_PROP.getProperty("key"));
  var trackerSheet = doc.getSheetByName(TRACKER_SHEET_NAME);

  trackerSheet.activate();
  doc.duplicateActiveSheet();
  doc.renameActiveSheet(cloneName);
  var cloneSheet = doc.getSheetByName(cloneName);
  cloneSheet.getRange("A1").setValue(cloneName);
}

function zero(to, from, column) {
  var doc = SpreadsheetApp.openById(SCRIPT_PROP.getProperty("key"));
  var trackerSheet = doc.getSheetByName(TRACKER_SHEET_NAME);

  for(var i = to; i <= from; i++) {
    trackerSheet.getRange(i, column).setValue(0);
  }
}

// function test() {
//   var doc = SpreadsheetApp.openById(SCRIPT_PROP.getProperty("key"));
//   var sheet = doc.getSheetByName(SHEET_NAME);
//   var l = sheet.getRange(sheet.getLastRow(),6).getValue();
//   var cloneName = Utilities.formatDate(l, "GMT-5", 'MMMM dd, yyyy');
//   var a=1;
// }